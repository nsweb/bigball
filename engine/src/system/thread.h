

#ifndef BB_THREAD_H
#define BB_THREAD_H 

#include "lockfreequeue.h"
#include "task.h"

namespace bigball
{

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
class peTThreadEvent
{
public:
	peTThreadEvent();
	~peTThreadEvent();

	bool	Create();
	void	Destroy();
	void	SetEvent();
	void	ResetEvent();
	void	WaitForSingleObject( u32 _nMs );

private:
	HANDLE		m_hEvent;
};

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
class peTThread
{
public:
	peTThread();
	virtual ~peTThread();

	virtual bool	Create();
	virtual void	Destroy();

	virtual void	ThreadMain();

private:
	HANDLE	m_hThread;

	static u32 __stdcall s_ThreadMain( void* _pArgs );
};

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

class CACHE_ALIGN peTWorkerThread : public peTThread
{
public:
	peTWorkerThread();
	virtual ~peTWorkerThread();

	virtual bool	Create();
	virtual void	Destroy();

	virtual void	ThreadMain();

	void			PushTask( peTTask* _pTask );
	peTTask*		PopFinishedTask();
	void			SetExit();
	void			ForceBusy();
	void			SetTaskProxy( peTTaskProxy* _pTaskProxy );
	u32				IsRunning()		{ return m_bRunning;	}


	//SwarmJob * getFinished(void)
	//{
	//	SwarmJob *ret = 0;
	//	mFinished.pop(ret);
	//	return ret;
	//}

private:
	u32					m_bRunning;
	u32					m_bExit;

	peTTaskProxy*		m_pTaskProxy;
	peTThreadEvent		m_oBusyEvent;
	//JobScheduler         *mJobScheduler;    // provides new jobs to perform
	peTTask*						m_pCurrentTask;             // current job being worked on
	peTCircularQueue<peTTask*>		m_oStaticTaskQueue;			// jobs that have been completed and may be reported back to the application.
	peTCircularQueue<peTTask*>		m_oFinishedTaskQueue;		// jobs that have been completed and may be reported back to the application.
}; 


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

} /*namespace bigball*/

#endif // BB_THREAD_H